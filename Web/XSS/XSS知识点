XSS绕过过滤的一些技巧
• 输入在标签间的情况：测试<>是否被过滤或转义，若无则直接<img src=1 onerror=alert(1)>
• 输入在script标签内：我们需要在保证内部JS语法正确的前提下，去插入我们的payload。 如果我们的
输出在字符串内部，测试字符串能否被闭合。如果我 们无法闭合包裹字符串的引号，这个点就很难利用
了。 可能的解决方案：可以控制两处输入且\可用、存在宽字节
• 输入在HTML属性内：首先查看属性是否有双引号包裹、没有则直接添加新的事件属性； 有双引号包裹
则测试双引号是否可用，可用则闭合属性之后添加 新的事件属性； TIP：HTML的属性，如果被进行
HTML实体编码(形如&#039;&#x27)，那么 HTML会对其进行自动解码，从而我们可以在属性里以
HTML实体编 码的方式引入任意字符，从而方便我们在事件属性里以JS的方式构 造payload。
• 输出在JS中，空格被过滤：使用/**/代替空格。
• 输出在JS注释中： 设法插入换行符%0A，使其逃逸出来。
• 输入在JS字符串内： 可以利用JS的十六进制、八进制、unicode编码。
• 输入在src/href/action等属性内：可以利用javascript:alert(1)，以及 data:text/html;base64;加上
base64编码后的HTML。
• onxxx事件的js脚本可以用html编码来绕过对某些关键字的过滤。
• 利用html5的一些新元素(经常被忽视的一个地方)












1.如果输出内容出现在JS块的注释里，那么被注释掉的语句依旧可以执行。

payload：%0aalert(1);//
%0a换行
alert(1);我们要执行的语句
//注释掉后面的代码

示例
<script>
//var str=\"".$str."\"; 
</script>